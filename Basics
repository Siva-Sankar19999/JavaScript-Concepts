polyfill example in medscape


/* Last Update: 1/29/2019 by D McCleod
 * - dispatch event for collapsed ads.
 */
/* Last Update: 11/17/2016 by EB */
/* Previous Update: 6/19/2014 by JS */

/* polyfill for IE */
(function () {

    if ( typeof window.CustomEvent === "function" ) return false;

    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: null };
        var evt = document.createEvent( 'CustomEvent' );
        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();

var elem = window.parent.document.getElementById(window.frameElement.id);
var elemCont = window.parent.document.getElementById(elem.parentNode.parentNode.id).parentElement;
var collapseEvent = new CustomEvent('collapse', {
    detail: {
        iframe: elem.id,
        parent: elem.parentNode.parentNode.id
    }
});

if (elemCont.className.indexOf("adSpcHolder") !== -1) {
    elemCont.style.display = "none";
} else {
    window.parent.document.getElementById(elem.parentNode.parentNode.id).style.display = "none";
    window.parent.document.getElementById(elem.parentNode.parentNode.id).className = "blank-ad";
    console.log(elem.parentNode.parentNode.id);
    broadcastCollapseEvent();
}

if(window.parent.pageCurrentURL.indexOf('slideshow') !== -1 && typeof window.parent.slideShow === "object" ){
    window.parent.slideShow.triggers.removead({track: false});
}

function broadcastCollapseEvent() {
    window.parent.dispatchEvent(collapseEvent);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------


->Javascript Important concepts about prototype:
                                       https://www.freecodecamp.org/news/a-beginners-guide-to-javascripts-prototype/
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->Async, Defer attributes in script tag :

1. when we reload the browser first browser starts parsing the HTML and when it sees any script tag no attributes(async,defer) it will stop parsing and fetch JS file and execute it .Because of this behaviour we place script tag in end of body tag.  

2.Async : while browser parsing the HTML it sees any script tag with async attribute it parallely fecth JS file while parsing and when JS file has completed fetching. then browser stops parsing and execute js file. 
                                            a) It will be good for google analytics 
                                            b) when there are js files which are dependent of each other we should not use async attribute
3.Defer : while browser parsing the HTML it sees any script tag with defer attribute it parallely fecth JS file while parsing and when JS file has completed fetching. then browser will not stop HTML parsing and execute js file after HTML file has completed parsed.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->How javascript code is executed ? https://www.javascripttutorial.net/javascript-execution-context/
->Exection context
	1.Everything in javascript happens in execution context
	2.when javascript engine begins start executing there will be two phases 1. Memory creation Phase 2.Code execution Phase
		* 1.Memory creation Phase : In Memory phase, memory will be allocated only.
						   a) For variables, Memory will be allocated and undefined value will be assigned to the variables in memory phase.
						   b) For Functions, Memory will be  allocated and entire function will be assigned to it.
		* 2.Code execution Phase : In code phase, real code will start executing 
						   a) For variables, calculation,etc will be done and real values will be assigned (Like replacing the undefined values    							 for variables which were created before in memory creation phase)	
						   b) For function calls, there will be another execution context will be created and same process will happen like above                                                       and when it sees a return statement or end of statement the inner execution context will be deleted and return the                                                       control to global execution context

       *3. For maintainig this execution context there will be stack called CALL STACK OR RUNTIME STACK OR EXECUTION CONTEXT STACK
       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->Hoisting in Javascript
->In terms of general understanding : we can call a function in javascript before Initialization.
    fun();
    function fun(){
    	console.log('Hoisting example');
    }

->And Hoisting is not like Javascript moves everything up : Because of Execution context phase ,For Functions, Memory will be  allocated and entire function will be assigned
  to it and For variables, Memory will be allocated and undefined value will be assigned to the variables in memory phase  
->Because of above behaviour we can access a variable (Var) before it is declared and Initialized and can call a function before it is declared.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->udefined vs not defined

->undefined is a special value provided by JS engine and we should not give this undefined values to any variable.
->not defined we get this when there is no memory allocated to it .

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->Lexical Environment and Scope and Scope chain

->scope : Where you can access a specific variable or functionin in the code.
->Scope chain : First it checks in its local memory and after lexical environment of its parent and and Lexical environment of its parents parent etc 
->Lexical Environment : Local memory + Lexical environment (Where it is physically Present) of its parent
     eg: function a(){
          var c=10;
	  function b(){                      -> b Lexical parent is 'a' because it is physically present in a
	   console.log(c)                    ->  b lexical environment is local memory of b and its lexical environment of its parent
	  }
	  b();
     }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->What is Temporal Deadzone and Let and Const are Hoisted ?

->Let and Const are also hoisted and but these are not attached to global object 
->Temporal Dead zone is time between variables are hoisted and these are not initialized to some initial value and when we try to access these variables in this time we will get
  error.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->Block scope 
->Block : With the help of block we can group statements and where Javascript can only execute one statement we can make it to execute group statements with the 
          help of block.
->Block scope : let and const have block scope and var doesnot have.
	  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->Closures and Explanation
->closures : (Explanation) Every function in javascript has access to variables and functions in his parent(lexical Env or surrounding). 
             Eventhough that function is executed in other scope that function still remember its surrounding state.
             1. A closure is a combination of function and a reference to its surrounding state 
             1. A function along with a reference to its outer environment forms a closure
	     1. Function bundled with its lexical environment(surrounding state) is a closure
             2. When it will be formed ? Whenever a fucntion is returned, function along with its surrounding state (closure) was returned and it still maintains a
	        reference to its surrounding state.

 -> when there is a inner function in outer function, the inner function remembers its surrounding state(Lexical environment) and forms a closure called
             'outer'
	   ->When the inner function is returned from outer function and even though outer function call ended but the inner function still remembers its surrounding
	     state
	     
	   eg: function outer(){
	        var a=10;
		function inner(){
		 console.log(a);
		 }
	     //	inner();
		return inner;
		}  

             const z=outer();
	     console.log(z());  ----->It prints 10 even though outer function call ended but inner function still remember its surrounding state. because it forms a 
	                              closure (function along with its surrounding state was returned).
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->Questions on Closure
   Q)what if we place var a=10 after inner function and before return like below ?
     function outer(){
     	function inner(){
	  console.log(a);
	}
	var a=10;       -----/likw this
	return inner;
	}
     const otFn=outer();
     otFn();
     
   a) It still forms a closure and it doesnot follow any sequence in forming closure .It just forms a closure with its outer environment.
   
   Q) What if we pass some argument variable while calling outer(). Does it remember that variable?
   a) yes ..it remembers that variable it is also part of surrounding environment. 
     
     function outer(b){
       const a=10;
       function inner(){
        console.log(a,b);
       }
       return inner
      }
     cont otFn=outer(10);
     otFn();
  
   Q)What if outer function is present in another nested function will inner still forms a closure with its also?
   a)yes
     function outest(){
        var b=10;
     	function outer(){
	  var a=10;  
	  function inner(){
	    console.log(a,b)
	  }
	  return inner
	}
	return outer
     }
   
   Q)Advantages of closures?
   a) There are many advantages of closures but one good example is Data Hiding and data privacy
      function make(){
        var count=0;
        return function inner(){
          count=count+1;
          console.log(count);
        }
     } 
     
    const a=make();
    a();
    a();
    
    Now above, we provide some privacy to count variable .It(count variable) can only be accessed by inner function only and make modifications through inner function only. 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
->Disadvantages of Closures
  Memory is accumulated because whenever closure is formed and memory will be deallocated only when program expires.
  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
->Functions in Javascript
 function statement or function declaration : It is normal declaration 
  eg: function inner(){
        console.log('Hello World');
      }
 function expression : we assign a function(as a value) to a variable 
  eg: const a=function inner(){
       console.log('Hello World');
      }   
Q)Difference between function declaration and function expression ?
a) Hoisting

->Anonymous function
  A function without name is anonymous function and these are used in place where we want to use function as a value
  eg: const a=function (){} 

->Named function expression
  eg: var a= function inner(){}
  There is one gotcha in this named function expression . When we call function like inner() ->it gives error beocz it is not created in outer scope
  
->First Class functions
  The ability of function to be passed as value to another function and return from the function is first class functions
  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
->What is a callback function in javascript
    1. when we pass a function to another function and that passed function is called callback function.
    2. Because of callback function we can achieve asynchronous programming in javascript [Actually javascript is synchronous and single threaded programming language].
    Q) why name callback ?
    a) We gave the responsibility of calling passed function to another function and will be called later.
    
     setTimeout(function(){console.log('checking main thread')},5000);
     function a(){
     	console.log('print a');
     }
     function b(){
     	console.log('print b');
     }
     
     If javascript is synchronus first we will wait for 5 seconds and execute that callback function.In the mean time(5s) we are bloacking the main thread not doing anything.
     because of webapi's we are providing asynchronous to JS. In the waiting time we are executing some other code and when the time is up It will execute that independent code in 
     callback function.Because of callbacks we are doing asynchronous tasks.
     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 ->Callback Hell
     
     
.    
  
  






  
